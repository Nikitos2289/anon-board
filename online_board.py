#!/usr/bin/env python3
"""
–ê–ù–û–ù–ò–ú–ù–ê–Ø –û–ù–õ–ê–ô–ù –ë–û–†–î–ê
–ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π + –∑–∞–ø—É—Å–∫
"""

import sys
import os
import subprocess
import urllib.request
import tempfile

def install_and_import():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Flask
        from flask import Flask, request, jsonify, render_template_string
        import sqlite3
        import datetime
        import hashlib
        return Flask, request, jsonify, render_template_string, sqlite3, datetime, hashlib
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Flask...")
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask
            subprocess.check_call([sys.executable, "-m", "pip", "install", "flask"], 
                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("‚úÖ Flask —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            os.execv(sys.executable, [sys.executable] + sys.argv)
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Flask")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install flask")
            sys.exit(1)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
Flask, request, jsonify, render_template_string, sqlite3, datetime, hashlib = install_and_import()

# –û–°–ù–û–í–ù–û–ô –ö–û–î –°–ï–†–í–ï–†–ê
app = Flask(__name__)
DB_FILE = "online_board.db"

MAIN_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>–ê–Ω–æ–Ω–∏–º–Ω–∞—è –û–Ω–ª–∞–π–Ω –ë–æ—Ä–¥–∞</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial; margin: 20px; background: #f0f0f0; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        .logo { text-align: center; font-family: monospace; background: black; color: lime; padding: 10px; border-radius: 5px; }
        .topic { border: 1px solid #ccc; margin: 10px 0; padding: 15px; border-radius: 5px; background: #f9f9f9; }
        .topic-title { font-size: 1.2em; font-weight: bold; color: #333; }
        .topic-meta { color: #666; font-size: 0.9em; margin: 5px 0; }
        .topic-content { margin: 10px 0; white-space: pre-wrap; background: white; padding: 10px; border-radius: 3px; }
        form { margin: 20px 0; }
        input, textarea { width: 100%; margin: 5px 0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
        button { background: #007cba; color: white; padding: 12px 25px; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #005a87; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            <h2>DOX BIN</h2>
            <p>–ë–£–†–ì–ï–†–´</p>
        </div>

        <h3>üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É</h3>
        <form action="/create" method="post">
            <input type="text" name="title" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã" required>
            <textarea name="content" placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è" rows="6" required></textarea>
            <button type="submit">üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ–º—É</button>
        </form>

        <h3>üìÇ –í—Å–µ —Ç–µ–º—ã ({{ topics_count }})</h3>
        {% if topics %}
            {% for topic in topics %}
            <div class="topic">
                <div class="topic-title">{{ topic.title }}</div>
                <div class="topic-meta">
                    üîë ID: {{ topic.id }} | 
                    üïê {{ topic.timestamp }} | 
                    üë§ {{ topic.author_ip }}
                </div>
                <div class="topic-content">{{ topic.content }}</div>
            </div>
            {% endfor %}
        {% else %}
            <p>üì≠ –¢–µ–º –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>
        {% endif %}

        <div style="text-align: center; margin-top: 20px; color: #666; font-size: 0.9em;">
            üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ | 
            üì± –î–æ—Å—Ç—É–ø–Ω–æ —Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        </div>
    </div>

    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setTimeout(() => { location.reload(); }, 30000);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        document.querySelector('form').addEventListener('submit', function(e) {
            if(!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–º—É? –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')) {
                e.preventDefault();
            }
        });
    </script>
</body>
</html>
'''

SUCCESS_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞!</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial; text-align: center; margin-top: 50px; }
        .success { background: #d4edda; padding: 20px; border-radius: 10px; margin: 20px auto; max-width: 500px; }
    </style>
</head>
<body>
    <div class="success">
        <h1>‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</h1>
        <p><strong>ID —Ç–µ–º—ã:</strong> {{ topic_id }}</p>
        <p>üîó <strong>–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π:</strong></p>
        <code style="background: #f8f9fa; padding: 10px; display: block; margin: 10px;">{{ url }}</code>
        <a href="/" style="display: inline-block; margin-top: 15px; padding: 10px 20px; background: #007cba; color: white; text-decoration: none; border-radius: 5px;">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ä–¥–µ</a>
    </div>
</body>
</html>
'''

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS topics (
            id TEXT PRIMARY KEY,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            author_ip TEXT DEFAULT 'unknown'
        )
    ''')
    conn.commit()
    conn.close()

def generate_id(text: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    return hashlib.md5(f"{text}{datetime.datetime.now().isoformat()}".encode()).hexdigest()[:10]

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT id, title, content, timestamp, author_ip FROM topics ORDER BY timestamp DESC')
    
    topics = []
    for row in cursor.fetchall():
        topics.append({
            'id': row[0],
            'title': row[1],
            'content': row[2],
            'timestamp': row[3][:16],  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            'author_ip': row[4]
        })
    
    conn.close()
    return render_template_string(MAIN_TEMPLATE, topics=topics, topics_count=len(topics))

@app.route('/create', methods=['POST'])
def create_topic():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã"""
    title = request.form['title']
    content = request.form['content']
    user_ip = request.remote_addr
    
    if not title.strip() or not content.strip():
        return "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!", 400
    
    topic_id = generate_id(title + content)
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO topics (id, title, content, timestamp, author_ip)
        VALUES (?, ?, ?, ?, ?)
    ''', (topic_id, title, content, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_ip))
    
    conn.commit()
    conn.close()
    
    return render_template_string(SUCCESS_TEMPLATE, topic_id=topic_id, url=request.host_url)

@app.route('/api/topics')
def api_topics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT id, title, content, timestamp, author_ip FROM topics ORDER BY timestamp DESC')
    
    topics = []
    for row in cursor.fetchall():
        topics.append({
            'id': row[0],
            'title': row[1],
            'content': row[2],
            'timestamp': row[3],
            'author_ip': row[4]
        })
    
    conn.close()
    return jsonify(topics)

def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    init_database()
    print("üöÄ" * 50)
    print("üåê –ê–ù–û–ù–ò–ú–ù–ê–Ø –û–ù–õ–ê–ô–ù –ë–û–†–î–ê –ó–ê–ü–£–©–ï–ù–ê!")
    print("üöÄ" * 50)
    print("\nüìä –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:5000")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("\nüåç –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª")
    print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ngrok http 5000")
    print("   3. –ò–ª–∏: ssh -R 80:localhost:5000 nokey@localhost.run")
    print("\n‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    print("‚îÄ" * 50)
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("‚ö†Ô∏è  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: python online_board.py --port 8080")

if __name__ == '__main__':
    start_server()