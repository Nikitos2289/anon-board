#!/usr/bin/env python3
"""
–ê–ù–û–ù–ò–ú–ù–ê–Ø –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–ê–Ø –ë–û–†–î–ê
–û–Ω–ª–∞–π–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ + –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""

import sys
import os
import requests
import json
import datetime
import hashlib
from flask import Flask, request, jsonify

# ================== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ==================
app = Flask(__name__)
DB_FILE = "shared_board.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    import sqlite3
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS topics (
            id TEXT PRIMARY KEY,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            author_ip TEXT DEFAULT 'unknown'
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/api/topics', methods=['GET'])
def get_topics():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã"""
    import sqlite3
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT id, title, content, timestamp, author_ip FROM topics ORDER BY timestamp DESC')
    
    topics = []
    for row in cursor.fetchall():
        topics.append({
            'id': row[0],
            'title': row[1],
            'content': row[2],
            'timestamp': row[3],
            'author_ip': row[4]
        })
    
    conn.close()
    return jsonify(topics)

@app.route('/api/create', methods=['POST'])
def create_topic():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É"""
    import sqlite3
    data = request.get_json()
    
    topic_id = hashlib.md5(f"{data['title']}{data['content']}{datetime.datetime.now()}".encode()).hexdigest()[:10]
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO topics (id, title, content, timestamp, author_ip)
        VALUES (?, ?, ?, ?, ?)
    ''', (topic_id, data['title'], data['content'], 
          datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), request.remote_addr))
    
    conn.commit()
    conn.close()
    
    return jsonify({"status": "success", "topic_id": topic_id})

def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    init_database()
    print("üåê –°–µ—Ä–≤–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)

# ================== –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢ ==================
class TerminalBoard:
    def __init__(self, server_url="http://localhost:5000"):
        self.server_url = server_url
        self.logo = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë            üåê –ê–ù–û–ù–ò–ú–ù–ê–Ø –ë–û–†–î–ê üåê             ‚ïë
‚ïë              üñ•Ô∏è  –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø           ‚ïë
‚ïë         üö´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–ï–©–ï–ù–û          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
    
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self, title):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f" {title}")
        print(f"{'='*60}")
    
    def wait_enter(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ Enter"""
        input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def get_topics(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.server_url}/api/topics")
            if response.status_code == 200:
                return response.json()
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º")
                return []
        except:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
    
    def create_topic(self, title, content):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            response = requests.post(f"{self.server_url}/api/create", 
                                   json={"title": title, "content": content})
            return response.json()
        except:
            return {"status": "error", "message": "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    def view_all_topics(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–µ–º"""
        self.clear_screen()
        print(self.logo)
        self.print_header("üìÇ –í–°–ï –¢–ï–ú–´")
        
        topics = self.get_topics()
        
        if not topics:
            print("üì≠ –¢–µ–º –ø–æ–∫–∞ –Ω–µ—Ç...")
            self.wait_enter()
            return
        
        for i, topic in enumerate(topics, 1):
            print(f"\nüìå –¢–ï–ú–ê #{i}")
            print(f"   üè∑Ô∏è  {topic['title']}")
            print(f"   üîë ID: {topic['id']}")
            print(f"   üïê {topic['timestamp']}")
            print(f"   üë§ {topic['author_ip']}")
            print(f"   üìÑ {topic['content'][:100]}{'...' if len(topic['content']) > 100 else ''}")
            print("   " + "‚îÄ" * 50)
        
        print(f"\nüìä –í—Å–µ–≥–æ —Ç–µ–º: {len(topics)}")
        self.wait_enter()
    
    def create_new_topic(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã"""
        self.clear_screen()
        print(self.logo)
        self.print_header("üìù –°–û–ó–î–ê–ù–ò–ï –¢–ï–ú–´")
        
        print("\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:")
        print("‚îÄ" * 40)
        
        title = input("üè∑Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫: ").strip()
        if not title:
            print("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            self.wait_enter()
            return
        
        print("\nüìÑ –¢–µ–∫—Å—Ç —Ç–µ–º—ã (–≤–≤–µ–¥–∏—Ç–µ END –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        print("‚îÄ" * 40)
        
        lines = []
        while True:
            try:
                line = input()
                if line.strip() == "END":
                    break
                lines.append(line)
            except EOFError:
                break
        
        content = "\n".join(lines)
        if not content.strip():
            print("‚ùå –¢–µ–∫—Å—Ç —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            self.wait_enter()
            return
        
        print("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        result = self.create_topic(title, content)
        
        if result.get("status") == "success":
            print(f"‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {result['topic_id']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        self.wait_enter()
    
    def search_topics(self):
        """–ü–æ–∏—Å–∫ —Ç–µ–º"""
        self.clear_screen()
        print(self.logo)
        self.print_header("üîç –ü–û–ò–°–ö –¢–ï–ú")
        
        query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
        if not query:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            self.wait_enter()
            return
        
        topics = self.get_topics()
        found = []
        
        for topic in topics:
            if query.lower() in topic['title'].lower() or query.lower() in topic['content'].lower():
                found.append(topic)
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: {len(found)}")
        
        for i, topic in enumerate(found, 1):
            print(f"\nüìå #{i} | {topic['title']}")
            print(f"   üîë {topic['id']}")
            print(f"   üìÑ {topic['content'][:80]}...")
        
        self.wait_enter()
    
    def view_topic_detail(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–º—ã"""
        self.clear_screen()
        print(self.logo)
        self.print_header("üìñ –ü–†–û–°–ú–û–¢–† –¢–ï–ú–´")
        
        topic_id = input("–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã: ").strip()
        if not topic_id:
            print("‚ùå ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            self.wait_enter()
            return
        
        topics = self.get_topics()
        topic = None
        
        for t in topics:
            if t['id'] == topic_id:
                topic = t
                break
        
        if not topic:
            print("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            self.wait_enter()
            return
        
        self.clear_screen()
        print(self.logo)
        self.print_header(f"üìñ {topic['title']}")
        
        print(f"üîë ID: {topic['id']}")
        print(f"üïê –í—Ä–µ–º—è: {topic['timestamp']}")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {topic['author_ip']}")
        print("\n" + "‚ïê" * 60)
        print(topic['content'])
        print("‚ïê" * 60)
        
        self.wait_enter()
    
    def show_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        self.clear_screen()
        print(self.logo)
        self.print_header("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        
        topics = self.get_topics()
        
        print(f"üìÇ –¢–µ–º: {len(topics)}")
        
        if topics:
            latest = topics[0]
            print(f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞: {latest['timestamp']}")
            print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {latest['title']}")
        
        print(f"üåê –°–µ—Ä–≤–µ—Ä: {self.server_url}")
        self.wait_enter()
    
    def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.clear_screen()
            print(self.logo)
            
            print("\nüìç –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
            print("1. üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É")
            print("2. üìÇ –í—Å–µ —Ç–µ–º—ã")
            print("3. üìñ –ù–∞–π—Ç–∏ —Ç–µ–º—É –ø–æ ID") 
            print("4. üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")
            print("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("6. üö™ –í—ã—Ö–æ–¥")
            
            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()
            
            if choice == '1':
                self.create_new_topic()
            elif choice == '2':
                self.view_all_topics()
            elif choice == '3':
                self.view_topic_detail()
            elif choice == '4':
                self.search_topics()
            elif choice == '5':
                self.show_stats()
            elif choice == '6':
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                self.wait_enter()

# ================== –ó–ê–ü–£–°–ö ==================
def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import flask
        import requests
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", "flask", "requests"])
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        os.execv(sys.executable, [sys.executable] + sys.argv)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    install_dependencies()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –ë–æ—Ä–¥—ã...")
    print("üåê –°–µ—Ä–≤–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: http://localhost:5000")
    print("üì± –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É")
    print("\nüí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
    print("   ngrok http 5000")
    print("   –ò–õ–ò")
    print("   ssh -R 80:localhost:5000 nokey@localhost.run")
    print("\n" + "‚ïê" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    import threading
    server_thread = threading.Thread(target=start_server, daemon=True)
    server_thread.start()
    
    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    import time
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    client = TerminalBoard()
    client.main_menu()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")