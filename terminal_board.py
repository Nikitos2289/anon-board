#!/usr/bin/env python3
"""
–ê–ù–û–ù–ò–ú–ù–ê–Ø –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–ê–Ø –ë–û–†–î–ê
–°–∫–∞—á–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
"""

import sys
import os
import subprocess
import json
import datetime
import hashlib
import threading
import time

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import flask
        import requests
        import sqlite3
        return True
    except ImportError as e:
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "flask", "requests"
            ])
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install flask requests")
            return False

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if not install_dependencies():
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
import flask
import requests
import sqlite3
from flask import Flask, request, jsonify

# ================== –í–ï–ë-–°–ï–†–í–ï–† ==================
app = Flask(__name__)
DB_FILE = "shared_board.db"

def init_database():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS topics (
            id TEXT PRIMARY KEY,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            author_ip TEXT DEFAULT 'unknown'
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/api/topics', methods=['GET'])
def get_topics():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT id, title, content, timestamp, author_ip FROM topics ORDER BY timestamp DESC')
    
    topics = []
    for row in cursor.fetchall():
        topics.append({
            'id': row[0],
            'title': row[1],
            'content': row[2],
            'timestamp': row[3],
            'author_ip': row[4]
        })
    
    conn.close()
    return jsonify(topics)

@app.route('/api/create', methods=['POST'])
def create_topic():
    data = request.get_json()
    
    topic_id = hashlib.md5(f"{data['title']}{data['content']}{datetime.datetime.now()}".encode()).hexdigest()[:10]
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO topics (id, title, content, timestamp, author_ip)
        VALUES (?, ?, ?, ?, ?)
    ''', (topic_id, data['title'], data['content'], 
          datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), request.remote_addr))
    
    conn.commit()
    conn.close()
    
    return jsonify({"status": "success", "topic_id": topic_id})

def start_server():
    init_database()
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)

# ================== –ö–õ–ò–ï–ù–¢ ==================
class TerminalBoard:
    def __init__(self, server_url="http://localhost:5000"):
        self.server_url = server_url
    
    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_menu(self):
        self.clear_screen()
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë            üåê –ê–ù–û–ù–ò–ú–ù–ê–Ø –ë–û–†–î–ê üåê             ‚ïë
‚ïë              üñ•Ô∏è  –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø           ‚ïë
‚ïë         üö´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–ï–©–ï–ù–û          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìç –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:
1. üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É
2. üìÇ –í—Å–µ —Ç–µ–º—ã
3. üìñ –ù–∞–π—Ç–∏ —Ç–µ–º—É –ø–æ ID
4. üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
6. üö™ –í—ã—Ö–æ–¥
        """)
    
    def get_topics(self):
        try:
            response = requests.get(f"{self.server_url}/api/topics")
            return response.json() if response.status_code == 200 else []
        except:
            return []
    
    def create_topic(self):
        self.clear_screen()
        print("üìù –°–û–ó–î–ê–ù–ò–ï –¢–ï–ú–´")
        print("‚îÄ" * 30)
        
        title = input("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ").strip()
        if not title:
            return
        
        print("–¢–µ–∫—Å—Ç (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        lines = []
        while True:
            line = input()
            if not line.strip():
                break
            lines.append(line)
        
        content = "\n".join(lines)
        if not content.strip():
            return
        
        result = requests.post(f"{self.server_url}/api/create", 
                             json={"title": title, "content": content})
        
        if result.json().get("status") == "success":
            print("‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
        
        input("‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def view_topics(self):
        self.clear_screen()
        print("üìÇ –í–°–ï –¢–ï–ú–´")
        print("‚îÄ" * 30)
        
        topics = self.get_topics()
        
        for i, topic in enumerate(topics, 1):
            print(f"\n{i}. {topic['title']}")
            print(f"   ID: {topic['id']}")
            print(f"   {topic['timestamp']}")
            preview = topic['content'][:80] + "..." if len(topic['content']) > 80 else topic['content']
            print(f"   {preview}")
        
        print(f"\n–í—Å–µ–≥–æ: {len(topics)} —Ç–µ–º")
        input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def search_id(self):
        self.clear_screen()
        print("üìñ –ü–û–ò–°–ö –ü–û ID")
        print("‚îÄ" * 30)
        
        topic_id = input("ID —Ç–µ–º—ã: ").strip()
        if not topic_id:
            return
        
        topics = self.get_topics()
        for topic in topics:
            if topic['id'] == topic_id:
                print(f"\nüìñ {topic['title']}")
                print(f"üïê {topic['timestamp']}")
                print(f"üë§ {topic['author_ip']}")
                print(f"\n{topic['content']}")
                break
        else:
            print("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def search_text(self):
        self.clear_screen()
        print("üîç –ü–û–ò–°–ö –ü–û –¢–ï–ö–°–¢–£")
        print("‚îÄ" * 30)
        
        query = input("–ü–æ–∏—Å–∫: ").strip()
        if not query:
            return
        
        topics = self.get_topics()
        found = [t for t in topics if query.lower() in t['title'].lower() or query.lower() in t['content'].lower()]
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(found)} —Ç–µ–º")
        for i, topic in enumerate(found, 1):
            print(f"\n{i}. {topic['title']}")
            print(f"   ID: {topic['id']}")
        
        input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def show_stats(self):
        self.clear_screen()
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("‚îÄ" * 30)
        
        topics = self.get_topics()
        print(f"–¢–µ–º: {len(topics)}")
        print(f"–°–µ—Ä–≤–µ—Ä: {self.server_url}")
        
        input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def run(self):
        while True:
            self.print_menu()
            choice = input("üéØ –í—ã–±–µ—Ä–∏—Ç–µ (1-6): ").strip()
            
            if choice == '1':
                self.create_topic()
            elif choice == '2':
                self.view_topics()
            elif choice == '3':
                self.search_id()
            elif choice == '4':
                self.search_text()
            elif choice == '5':
                self.show_stats()
            elif choice == '6':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter...")

# ================== –ó–ê–ü–£–°–ö ==================
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ê–Ω–æ–Ω–∏–º–Ω–æ–π –ë–æ—Ä–¥—ã...")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
    server_thread = threading.Thread(target=start_server, daemon=True)
    server_thread.start()
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    client = TerminalBoard()
    client.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")